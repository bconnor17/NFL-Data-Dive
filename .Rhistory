"Difference" = variance.m5)
forecast.table.5 <- forecast.table.5[2:13,]
pander(forecast.table.5)
model6 <- lm(logSpending ~ Time + I(Time^2) + I(Time^3) + I(Time^4) + I(Time^5) +
+ I(Time^6) + I(Time^7) +
fMonth + Changepoint + Changepoint*Time + Changepoint*I(Time^2) +
Changepoint*I(Time^3) +  Changepoint*I(Time^4) +  Changepoint*I(Time^5),
data = spending2)
#stargazer(model6, type = "text")
summary(model6)
forecast.m6 <-exp(predict(model6,newdata=spending.test.train))
variance.m6 <- forecast.m6 - spending.test.train$Spending
spending.test.train <- data.frame(spending.test.train, forecast.m6, variance.m6)
spending.test.train <- spending[300:312,]
forecast<-exp(predict(model3,newdata=spending.test.train))
variance <- forecast - spending.test.train$Spending
spending.test.train <- data.frame(spending.test.train, forecast, variance)
forecast.table.3 <- spending.test.train %>%
select(1,2,4,13,14) %>%
rename("Actual Spending" = Spending,
"Forecasted Spending" = forecast,
"Difference" = variance)
forecast.table.3 <- forecast.table.3[2:13,]
pander(forecast.table.3)
Month <- c(1:12)
plot(x = Month, y = forecast.table.3$`Forecasted Spending`, ylab = "Spending", main = "2019, Forecast vs. Actual", col = "red", type = "b")
lines(forecast.table.3$`Actual Spending`, col = "black", type = "b")
mse_model3 <- mean((forecast.table.3$Difference)^2)
mse_model3
model4 <- lm(dlogSpending ~ fMonth + c348 + s348 + c432 + s432, data = spending2)
#stargazer(model4, type = "text")
summary(model4)
priorLogsales <- c(0,rep(0,length(spending.test.train$Spending)-1))
priorLogsales[2] <- spending.test.train$logSpending[1]
for(i in 3:length(spending.test.train$Spending)){
i1<-i-1
priorLogsales[i]<- spending.test.train$logSpending[i1]
}
spending.test.train <- data.frame(spending.test.train, priorLogsales)
forecast.m4 <-predict(model4,newdata=spending.test.train)
spending.test.train <- data.frame(spending.test.train, forecast.m4)
spending.test.train <- spending.test.train %>%
mutate(model4.spending.f = exp(priorLogsales + forecast.m4),
model4.variance = model4.spending.f - Spending)
forecast.table.4 <- spending.test.train %>%
select(1,2,4,13,17,14,18) %>%
rename("Actual Spending" = Spending,
"Model 3 Forecast" = forecast,
"Model 4 Forecast" = model4.spending.f,
"Model 3 F vs. A" = variance,
"Model 4 F vs. A" = model4.variance)
forecast.table.4 <- forecast.table.4[2:13,]
pander(forecast.table.4)
plot(x = Month, y = forecast.table.4$`Model 3 Forecast`, ylab = "Spending", main = "2019, Forecast vs. Actual", col = "red", type = "b")
lines(forecast.table.4$`Actual Spending`, col = "black", type = "b")
lines(forecast.table.4$`Model 4 Forecast`, col = "blue", type = "b")
mse_model4 <- mean((forecast.table.4$`Model 4 F vs. A`)^2)
mse_model4
model5 <- lm(logSpending ~ Time + I(Time^2) + I(Time^3) +
fMonth + Changepoint + Changepoint*Time + Changepoint*I(Time^2) +
Changepoint*I(Time^3),
data = spending2)
#stargazer(model5, type = "text")
summary(model5)
forecast.m5 <-exp(predict(model5,newdata=spending.test.train))
variance.m5 <- forecast.m5 - spending.test.train$Spending
spending.test.train <- data.frame(spending.test.train, forecast.m5, variance.m5)
forecast.table.5 <- spending.test.train %>%
select(1,2,4,21, 22) %>%
rename("Actual Spending" = Spending,
"Model 5 Forecast" = forecast.m5,
"Difference" = variance.m5)
View(spending.test.train)
spending.test.train <- spending[300:312,]
forecast<-exp(predict(model3,newdata=spending.test.train))
variance <- forecast - spending.test.train$Spending
spending.test.train <- data.frame(spending.test.train, forecast, variance)
forecast.table.3 <- spending.test.train %>%
select(1,2,4,13,14) %>%
rename("Actual Spending" = Spending,
"Forecasted Spending" = forecast,
"Difference" = variance)
forecast.table.3 <- forecast.table.3[2:13,]
pander(forecast.table.3)
Month <- c(1:12)
plot(x = Month, y = forecast.table.3$`Forecasted Spending`, ylab = "Spending", main = "2019, Forecast vs. Actual", col = "red", type = "b")
lines(forecast.table.3$`Actual Spending`, col = "black", type = "b")
mse_model3 <- mean((forecast.table.3$Difference)^2)
mse_model3
model4 <- lm(dlogSpending ~ fMonth + c348 + s348 + c432 + s432, data = spending2)
#stargazer(model4, type = "text")
summary(model4)
b1<-coef(model4)[1]
b2<-coef(model4)[2:12]+b1
b3<-c(b1,b2)
x<-b3-mean(b3)
s12<-0
for(i in 2:12){
xsub<-x[i:12]
s12<-s12+sum(xsub)
}
s12<-s12/12
s<-c(rep(0,times=12))
s[12]<-s12
for(i in 1:11){
xsub<-x[1:i]
s[i]<-s[12]+sum(xsub)
}
model4seasonal<-exp(s)
model1seasonal<-exp(seas)
delta <- model4seasonal - model1seasonal
#Checking to make sure the model 5 seasonal indices multiply to 1
prod(model4seasonal)
options(digits = 4)
comptable1 <- data.frame(model1seasonal,model4seasonal, delta)
plot(x = Month, y = comptable1$model1seasonal, ylab = "Seasonal Index", main = "Seasonal Indices, Model 1 (red) vs. Model 4 (black)", col = "red", type = "b")
lines(comptable1$model4seasonal, col = "black", type = "b")
pander(comptable1)
qqnorm(resid(model4))
qqline(resid(model4))
plot(ts(resid(model4), start = c(1993, 1), freq = 12), xlab = "time", ylab = "residuals", main = "Residuals of Model 4")
acf(ts(resid(model4)))
spectrum(resid(model4), span = 8)
priorLogsales <- c(0,rep(0,length(spending.test.train$Spending)-1))
priorLogsales[2] <- spending.test.train$logSpending[1]
for(i in 3:length(spending.test.train$Spending)){
i1<-i-1
priorLogsales[i]<- spending.test.train$logSpending[i1]
}
spending.test.train <- data.frame(spending.test.train, priorLogsales)
forecast.m4 <-predict(model4,newdata=spending.test.train)
spending.test.train <- data.frame(spending.test.train, forecast.m4)
spending.test.train <- spending.test.train %>%
mutate(model4.spending.f = exp(priorLogsales + forecast.m4),
model4.variance = model4.spending.f - Spending)
forecast.table.4 <- spending.test.train %>%
select(1,2,4,13,17,14,18) %>%
rename("Actual Spending" = Spending,
"Model 3 Forecast" = forecast,
"Model 4 Forecast" = model4.spending.f,
"Model 3 F vs. A" = variance,
"Model 4 F vs. A" = model4.variance)
forecast.table.4 <- forecast.table.4[2:13,]
pander(forecast.table.4)
plot(x = Month, y = forecast.table.4$`Model 3 Forecast`, ylab = "Spending", main = "2019, Forecast vs. Actual", col = "red", type = "b")
lines(forecast.table.4$`Actual Spending`, col = "black", type = "b")
lines(forecast.table.4$`Model 4 Forecast`, col = "blue", type = "b")
mse_model4 <- mean((forecast.table.4$`Model 4 F vs. A`)^2)
mse_model4
model5 <- lm(logSpending ~ Time + I(Time^2) + I(Time^3) +
fMonth + Changepoint + Changepoint*Time + Changepoint*I(Time^2) +
Changepoint*I(Time^3),
data = spending2)
#stargazer(model5, type = "text")
summary(model5)
forecast.m5 <-exp(predict(model5,newdata=spending.test.train))
variance.m5 <- forecast.m5 - spending.test.train$Spending
spending.test.train <- data.frame(spending.test.train, forecast.m5, variance.m5)
forecast.table.5 <- spending.test.train %>%
select(1,2,4,19,20) %>%
rename("Actual Spending" = Spending,
"Model 5 Forecast" = forecast.m5,
"Difference" = variance.m5)
forecast.table.5 <- forecast.table.5[2:13,]
pander(forecast.table.5)
model6 <- lm(logSpending ~ Time + I(Time^2) + I(Time^3) + I(Time^4) + I(Time^5) +
+ I(Time^6) + I(Time^7) +
fMonth + Changepoint + Changepoint*Time + Changepoint*I(Time^2) +
Changepoint*I(Time^3) +  Changepoint*I(Time^4) +  Changepoint*I(Time^5),
data = spending2)
#stargazer(model6, type = "text")
summary(model6)
forecast.m6 <-exp(predict(model6,newdata=spending.test.train))
variance.m6 <- forecast.m6 - spending.test.train$Spending
spending.test.train <- data.frame(spending.test.train, forecast.m6, variance.m6)
forecast.table.4 <- spending.test.train %>%
select(1,2,4,13,17,19, 21, 14,18, 20, 22) %>%
rename("Actual Spending" = Spending,
"Model 3 Forecast" = forecast,
"Model 4 Forecast" = model4.spending.f,
"Model 5 Forecast" = forecast.m5,
"Model 6 Forecast" = forecast.m6,
"Model 3 F vs. A" = variance,
"Model 4 F vs. A" = model4.variance,
"Model 5 F vs. A" = variance.m5,
"Model 6 F vs. A" = variance.m6)
forecast.table.6 <- spending.test.train %>%
select(1,2,4,13,17,19, 21, 14,18, 20, 22) %>%
rename("Actual Spending" = Spending,
"Model 3 Forecast" = forecast,
"Model 4 Forecast" = model4.spending.f,
"Model 5 Forecast" = forecast.m5,
"Model 6 Forecast" = forecast.m6,
"Model 3 F vs. A" = variance,
"Model 4 F vs. A" = model4.variance,
"Model 5 F vs. A" = variance.m5,
"Model 6 F vs. A" = variance.m6)
View(forecast.table.6)
forecast.m6 <-exp(predict(model6,newdata=spending.test.train))
variance.m6 <- forecast.m6 - spending.test.train$Spending
spending.test.train <- data.frame(spending.test.train, forecast.m6, variance.m6)
forecast.table.6 <- spending.test.train %>%
select(1,2,4,13,17,19, 21, 14,18, 20, 22) %>%
rename("Actual Spending" = Spending,
"Model 3 Forecast" = forecast,
"Model 4 Forecast" = model4.spending.f,
"Model 5 Forecast" = forecast.m5,
"Model 6 Forecast" = forecast.m6,
"Model 3 F vs. A" = variance,
"Model 4 F vs. A" = model4.variance,
"Model 5 F vs. A" = variance.m5,
"Model 6 F vs. A" = variance.m6)
forecast.table.6 <- forecast.table.6[2:13,]
pander(forecast.table.6)
plot(x = Month, y = forecast.table.4$`Model 3 Forecast`, ylab = "Spending", main = "2019, Forecast vs. Actual", col = "red", type = "b")
forecast.table.6 <- forecast.table.6[2:13,]
pander(forecast.table.6)
spending.test.train <- spending[300:312,]
forecast<-exp(predict(model3,newdata=spending.test.train))
variance <- forecast - spending.test.train$Spending
spending.test.train <- data.frame(spending.test.train, forecast, variance)
forecast.table.3 <- spending.test.train %>%
select(1,2,4,13,14) %>%
rename("Actual Spending" = Spending,
"Forecasted Spending" = forecast,
"Difference" = variance)
forecast.table.3 <- forecast.table.3[2:13,]
pander(forecast.table.3)
Month <- c(1:12)
plot(x = Month, y = forecast.table.3$`Forecasted Spending`, ylab = "Spending", main = "2019, Forecast vs. Actual", col = "red", type = "b")
lines(forecast.table.3$`Actual Spending`, col = "black", type = "b")
mse_model3 <- mean((forecast.table.3$Difference)^2)
mse_model3
model4 <- lm(dlogSpending ~ fMonth + c348 + s348 + c432 + s432, data = spending2)
#stargazer(model4, type = "text")
summary(model4)
b1<-coef(model4)[1]
b2<-coef(model4)[2:12]+b1
b3<-c(b1,b2)
x<-b3-mean(b3)
s12<-0
for(i in 2:12){
xsub<-x[i:12]
s12<-s12+sum(xsub)
}
s12<-s12/12
s<-c(rep(0,times=12))
s[12]<-s12
for(i in 1:11){
xsub<-x[1:i]
s[i]<-s[12]+sum(xsub)
}
model4seasonal<-exp(s)
model1seasonal<-exp(seas)
delta <- model4seasonal - model1seasonal
#Checking to make sure the model 5 seasonal indices multiply to 1
prod(model4seasonal)
options(digits = 4)
comptable1 <- data.frame(model1seasonal,model4seasonal, delta)
plot(x = Month, y = comptable1$model1seasonal, ylab = "Seasonal Index", main = "Seasonal Indices, Model 1 (red) vs. Model 4 (black)", col = "red", type = "b")
lines(comptable1$model4seasonal, col = "black", type = "b")
pander(comptable1)
priorLogsales <- c(0,rep(0,length(spending.test.train$Spending)-1))
priorLogsales[2] <- spending.test.train$logSpending[1]
for(i in 3:length(spending.test.train$Spending)){
i1<-i-1
priorLogsales[i]<- spending.test.train$logSpending[i1]
}
spending.test.train <- data.frame(spending.test.train, priorLogsales)
forecast.m4 <-predict(model4,newdata=spending.test.train)
spending.test.train <- data.frame(spending.test.train, forecast.m4)
spending.test.train <- spending.test.train %>%
mutate(model4.spending.f = exp(priorLogsales + forecast.m4),
model4.variance = model4.spending.f - Spending)
forecast.table.4 <- spending.test.train %>%
select(1,2,4,13,17,14,18) %>%
rename("Actual Spending" = Spending,
"Model 3 Forecast" = forecast,
"Model 4 Forecast" = model4.spending.f,
"Model 3 F vs. A" = variance,
"Model 4 F vs. A" = model4.variance)
forecast.table.4 <- forecast.table.4[2:13,]
pander(forecast.table.4)
plot(x = Month, y = forecast.table.4$`Model 3 Forecast`, ylab = "Spending", main = "2019, Forecast vs. Actual", col = "red", type = "b")
lines(forecast.table.4$`Actual Spending`, col = "black", type = "b")
lines(forecast.table.4$`Model 4 Forecast`, col = "blue", type = "b")
mse_model4 <- mean((forecast.table.4$`Model 4 F vs. A`)^2)
mse_model4
model5 <- lm(logSpending ~ Time + I(Time^2) + I(Time^3) +
fMonth + Changepoint + Changepoint*Time + Changepoint*I(Time^2) +
Changepoint*I(Time^3),
data = spending2)
#stargazer(model5, type = "text")
summary(model5)
forecast.m5 <-exp(predict(model5,newdata=spending.test.train))
variance.m5 <- forecast.m5 - spending.test.train$Spending
spending.test.train <- data.frame(spending.test.train, forecast.m5, variance.m5)
forecast.table.5 <- spending.test.train %>%
select(1,2,4,19,20) %>%
rename("Actual Spending" = Spending,
"Model 5 Forecast" = forecast.m5,
"Difference" = variance.m5)
forecast.table.5 <- forecast.table.5[2:13,]
pander(forecast.table.5)
model6 <- lm(logSpending ~ Time + I(Time^2) + I(Time^3) + I(Time^4) + I(Time^5) +
+ I(Time^6) + I(Time^7) +
fMonth + Changepoint + Changepoint*Time + Changepoint*I(Time^2) +
Changepoint*I(Time^3) +  Changepoint*I(Time^4) +  Changepoint*I(Time^5),
data = spending2)
#stargazer(model6, type = "text")
summary(model6)
forecast.m6 <-exp(predict(model6,newdata=spending.test.train))
variance.m6 <- forecast.m6 - spending.test.train$Spending
spending.test.train <- data.frame(spending.test.train, forecast.m6, variance.m6)
forecast.table.6 <- spending.test.train %>%
select(1,2,4,13,17,19, 21, 14,18, 20, 22) %>%
rename("Actual Spending" = Spending,
"Model 3 Forecast" = forecast,
"Model 4 Forecast" = model4.spending.f,
"Model 5 Forecast" = forecast.m5,
"Model 6 Forecast" = forecast.m6,
"Model 3 F vs. A" = variance,
"Model 4 F vs. A" = model4.variance,
"Model 5 F vs. A" = variance.m5,
"Model 6 F vs. A" = variance.m6)
forecast.table.6 <- forecast.table.6[2:13,]
pander(forecast.table.6)
plot(x = Month, y = forecast.table.4$`Model 3 Forecast`, ylab = "Spending", main = "2019, Forecast vs. Actual", col = "red", type = "b")
lines(forecast.table.6$`Actual Spending`, col = "black", type = "b")
lines(forecast.table.6$`Model 4 Forecast`, col = "blue", type = "b")
lines(forecast.table.6$`Model 5 Forecast`, col = "purple", type = "b")
lines(forecast.table.6$`Model 6 Forecast`, col = "green", type = "b")
mse_model5 <- mean((forecast.table.6$`Model 5 F vs. A`)^2)
mse_model6 <- mean((forecast.table.6$`Model 6 F vs. A`)^2)
~/.RData
library(caret)
library(DBI)
library(DMwR)
library(ggrepel)
library(leaps)
library(lme4)
library(MASS)
library(Metrics)
library(merTools)
library(nflfastR)
library(RSQLite)
library(tidyverse)
library(rstudioapi)
library(xgboost)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Connect to database
update_db()
connection <- dbConnect(SQLite(), "./pbp_db")
connection
pbp_db <- tbl(connection, "nflfastR_pbp")
# 2016 through 2020 rushing data
rushing_all <- pbp_db %>%
filter(play_type == "run") %>%
mutate(era = ifelse(season %in% c(1999:2001), 1,
ifelse(season %in% c(2002:2005), 2,
ifelse(season %in% c(2006:2013), 3,
ifelse(season %in% c(2014:2017), 4, 5))))) %>%
dplyr::select(rusher_id, posteam_type, posteam, defteam, yardline_100, half_seconds_remaining,
game_half, down, ydstogo, era, shotgun, no_huddle, run_gap,
score_differential, season, roof, yards_gained)
rushing_all.df <- as.data.frame(rushing_all)
rushing_all.df$run_gap <- ifelse(is.na(rushing_all.df$run_gap) == T, "Other",
rushing_all.df$run_gap)
rushing_all.df <- rushing_all.df %>%
mutate(posteam_type = as.factor(posteam_type),
posteam = as.factor(posteam),
defteam = as.factor(defteam),
game_half = as.factor(game_half),
down = as.factor(down),
era = as.factor(era),
shotgun = as.factor(shotgun),
no_huddle = as.factor(no_huddle),
run_gap = as.factor(run_gap),
season = as.factor(season),
roof = as.factor(roof)) %>%
filter(!is.na(yardline_100),
!is.na(down),
!is.na(roof))
# Training and test
set.seed(123)
trainIndex <- createDataPartition(rushing_all.df$yards_gained,
p = 0.7,
list = FALSE,
times = 1)
rushing_train <- rushing_all.df[trainIndex,]
rushing_valid <- rushing_all.df[-trainIndex,]
# Initial modeling (xRY, expected rushing yards)
xRY_lm1 <- lm(yards_gained ~ posteam_type + yardline_100 +
down + ydstogo + shotgun + run_gap +
score_differential + roof + era + season:defteam,
data = rushing_train)
summary(xRY_lm1)
# Checking out the predictions
rushing_valid <- rushing_valid %>%
mutate(pred_1 = predict(xRY_lm1, rushing_valid),
over_pred = yards_gained - pred_1)
prediction_plot <- ggplot(data = rushing_valid,
aes(x = pred_1, y = yards_gained)) +
geom_point() +
geom_smooth(method = "lm") +
theme_bw()
prediction_plot
# Metrics
pred_1_rmse <- RMSE(rushing_valid$pred_1, rushing_valid$yards_gained)
rushers_rank<- rushing_all.df %>%
group_by(rusher_id, season, posteam) %>%
summarize(carries = n(),
expected_YPA = mean(pred_1),
actual_YPA = mean(yards_gained),
avg_diff = actual_YPA - expected_YPA) %>%
mutate(expected_total_yards = carries * expected_YPA,
actual_total_yards = carries * actual_YPA,
total_diff = actual_total_yards - expected_total_yards) %>%
filter(carries >= 100) %>%
arrange(desc(avg_diff))
rushers_rank<- rushing_all.df %>%
group_by(rusher_id, season, posteam) %>%
summarize(carries = n(),
expected_YPA = mean(pred1),
actual_YPA = mean(yards_gained),
avg_diff = actual_YPA - expected_YPA) %>%
mutate(expected_total_yards = carries * expected_YPA,
actual_total_yards = carries * actual_YPA,
total_diff = actual_total_yards - expected_total_yards) %>%
filter(carries >= 100) %>%
arrange(desc(avg_diff))
# Model looks bad - but let's just see who the top performers were
rosters_all <- fast_scraper_roster(seasons = c(1999:2020)) %>%
select(gsis_id, full_name, height, weight)
rushing_all.df <- decode_player_ids(rushing_all.df) %>%
mutate(pred1 = predict(xRY_lm1, rushing_all.df))
rushers_rank<- rushing_all.df %>%
group_by(rusher_id, season, posteam) %>%
summarize(carries = n(),
expected_YPA = mean(pred1),
actual_YPA = mean(yards_gained),
avg_diff = actual_YPA - expected_YPA) %>%
mutate(expected_total_yards = carries * expected_YPA,
actual_total_yards = carries * actual_YPA,
total_diff = actual_total_yards - expected_total_yards) %>%
filter(carries >= 100) %>%
arrange(desc(avg_diff))
View(rushers_rank)
rushers_rank<- rushing_all.df %>%
group_by(rusher_id, season, posteam) %>%
summarize(carries = n(),
expected_YPA = mean(pred1),
actual_YPA = mean(yards_gained),
avg_diff = actual_YPA - expected_YPA) %>%
mutate(expected_total_yards = carries * expected_YPA,
actual_total_yards = carries * actual_YPA,
total_diff = actual_total_yards - expected_total_yards) %>%
filter(carries >= 100) %>%
arrange(desc(avg_diff)) %>%
left_join(rosters_all, by = c("rusher_id" = "gsis_id"))
# Model looks bad - but let's just see who the top performers were
rosters_all <- fast_scraper_roster(seasons = c(1999:2020)) %>%
select(gsis_id, full_name, height, weight) %>%
distinct(gsis_id, .keep_all = T)
rushers_rank<- rushing_all.df %>%
group_by(rusher_id, season, posteam) %>%
summarize(carries = n(),
expected_YPA = mean(pred1),
actual_YPA = mean(yards_gained),
avg_diff = actual_YPA - expected_YPA) %>%
mutate(expected_total_yards = carries * expected_YPA,
actual_total_yards = carries * actual_YPA,
total_diff = actual_total_yards - expected_total_yards) %>%
filter(carries >= 100) %>%
arrange(desc(avg_diff)) %>%
left_join(rosters_all, by = c("rusher_id" = "gsis_id"))
View(rushers_rank)
# Model looks bad - but let's just see who the top performers were
rosters_all <- fast_scraper_roster(seasons = c(1999:2020))
View(rosters_all)
# Model looks bad - but let's just see who the top performers were
rosters_all <- fast_scraper_roster(seasons = c(1999:2020))%>%
select(gsis_id, full_name, height, weight) %>%
distinct(gsis_id, .keep_all = T)
rushers_rank<- rushing_all.df %>%
group_by(rusher_id, season, posteam) %>%
summarize(carries = n(),
expected_YPA = mean(pred1),
actual_YPA = mean(yards_gained),
avg_diff = actual_YPA - expected_YPA) %>%
mutate(expected_total_yards = carries * expected_YPA,
actual_total_yards = carries * actual_YPA,
total_diff = actual_total_yards - expected_total_yards) %>%
filter(carries >= 100) %>%
left_join(rosters_all, by = c("rusher_id" = "gsis_id")) %>%
arrange(season, full_name)
# Model looks bad - but let's just see who the top performers were
rosters_all <- fast_scraper_roster(seasons = c(1999:2020))%>%
select(season, gsis_id, full_name, height, weight) %>%
arrange(season),
distinct(gsis_id, .keep_all = T)
# Model looks bad - but let's just see who the top performers were
rosters_all <- fast_scraper_roster(seasons = c(1999:2020))%>%
select(season, gsis_id, full_name, height, weight) %>%
arrange(season) %>%
distinct(gsis_id, .keep_all = T)
View(rosters_all)
# Model looks bad - but let's just see who the top performers were
rosters_all <- fast_scraper_roster(seasons = c(1999:2020))%>%
select(season, gsis_id, full_name, position, height, weight) %>%
arrange(season) %>%
distinct(gsis_id, .keep_all = T)
